image: registry.gitlab.bsc.es/hwdesign/containerhub/questa_riscv:latest

## This workflow avoids duplicate pipelines when there is an open merge request (commit_branch + merge_request) 
## so only the open merge request will be executed and not the commit_branch. PIPELINE_BRANCH will be used to refer to
## CI_COMMIT_BRANCH or CI_MERGE_REQUEST_SOURCE_BRANCH_NAME, we will not differentiate between them.
workflow:
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event") # Merge requests
      variables:
        PIPELINE_BRANCH: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - if: ($CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "pipeline") # Fix detached merge request pipelines
      when: never
    - if: ($CI_COMMIT_MESSAGE =~ /skip-ci/)
      when: never
    - if: ($CI_COMMIT_BRANCH) # All branches
      variables:
        PIPELINE_BRANCH: $CI_COMMIT_BRANCH
    - if: ($CI_PIPELINE_SOURCE == "pipeline") # trigger downstream
    - if: ($CI_COMMIT_TAG)

stages:
  - build
  - sim_isa_tests
  - sim_benchmarks
  - sim_multicore

variables:
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_CLEAN_FLAGS: -ffdx
  GIT_DEPTH: 1
  GIT_SUBMODULE_DEPTH: 1
  CI_RISCV_DIR: /opt/riscv-gnu-toolchain/rvv-0.7.1/
  MODELSIM_HOME: /eda/Siemens/2022-23/RHELx86/QUESTA-CORE-PRIME_2022.4
  VERILATOR_HOME: /opt/verilator/4.228

default:
  tags:
    - dv
  before_script:
    ## Access to repos
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es/".insteadOf "https://gitlab.bsc.es/"
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es/".insteadOf "git@gitlab-internal.bsc.es:"
    - git config --global url."https://".insteadOf "git://"

    ## setup licenses
    - export MGLS_LICENSE_FILE=1717@epi03.bsc.es
    - export LM_LICENSE_FILE=1717@epi03.bsc.es

    ## Install missing dependencies
    - apt install -y libbit-vector-perl

    ## Setup tools
    - . /load_modulefiles_bash.sh
    - module load rvv/0.7.1
    - module load verilator/4.228

.regression_base:
  script:
    - cd build
    - sims -sim_type=$SIM_TYPE -group=$TEST_GROUP -noclean -build_id=${CORE}_build_id
    - regreport $(ls -td -- */ | head -n 1) -summary && echo " " && regreport $(ls -td -- */ | head -n 1) | grep -E "^Diag" && echo " "
    - regreport $(ls -td -- */ | head -n 1) -summary | grep "REGRESSION PASSED" && echo "Simulation PASSED" || (echo "Simulation AILED" && exit 1)

.sargantana_regression_base:
  extends: .regression_base
  needs:
    - sargantana_build
  variables:
    CORE: sargantana
  before_script:
    - !reference [default, before_script]
    - source piton/sargantana_setup.sh
    - piton/sargantana_build_tools.sh $CI_JOB_TOKEN
    - export ARIANE_ROOT=$(pwd)/piton/design/chip/tile/sargantana # This should be fixed
    - export VERILATOR_ROOT=/opt/verilator/4.228

.ariane_regression_base:
  extends: .regression_base
  needs:
    - ariane_build
  variables:
    CORE: ariane
  before_script:
    - !reference [default, before_script]
    - source piton/ariane_setup.sh
    - export RISCV=/opt/riscv-gnu-toolchain/rvv-0.7.1/
    - piton/ariane_build_tools.sh $CI_JOB_TOKEN
  timeout: 4h


### Sargantana ###
sargantana_build:
  stage: build
  before_script:
    - !reference [.sargantana_regression_base, before_script]
  script:
    - cd build
    - sims -vlt_build -sys=manycore -x_tiles=1 -y_tiles=1 -sarg -build_id=sargantana_build_id
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - ./build

sargantana_isa_tests:
  extends: .sargantana_regression_base
  stage: sim_isa_tests
  parallel:
    matrix:
      - SIM_TYPE: [vlt]
        TEST_GROUP:
        - sarg_tile1_asm_tests_p
        - sarg_tile1_asm_tests_v
        - sarg_tile1_amo_tests_p
        - sarg_tile1_amo_tests_v
        - sarg_tile1_fp_tests_p
        - sarg_tile1_fp_tests_v
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - ./build

sargantana_benchmarks:
  extends: .sargantana_regression_base
  stage: sim_benchmarks
  parallel:
    matrix:
      - SIM_TYPE: [vlt]
        TEST_GROUP:
        - sarg_tile1_benchmarks
        - sarg_tile1_mt_benchmarks
        - sarg_tile1_simple
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - ./build


### Ariane ###
ariane_build:
  stage: build
  before_script:
    - !reference [.ariane_regression_base, before_script]
  script:
    - cd build
    - sims -msm_build -sys=manycore -x_tiles=1 -y_tiles=1 -ariane -build_id=ariane_build_id
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - ./piton/design/chip/tile/ariane/
      - ./build

ariane_isa_tests:
  extends: .ariane_regression_base
  stage: sim_isa_tests
  parallel:
    matrix:
      - SIM_TYPE: [msm]
        TEST_GROUP:
        - ariane_tile1_asm_tests_p
        - ariane_tile1_asm_tests_v
        - ariane_tile1_amo_tests_p
        - ariane_tile1_amo_tests_v
        - ariane_tile1_fp_tests_p
        - ariane_tile1_fp_tests_v
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - ./build

ariane_benchmarks:
  extends: .ariane_regression_base
  stage: sim_benchmarks
  parallel:
    matrix:
      - SIM_TYPE: [msm]
        TEST_GROUP:
        - ariane_tile1_benchmarks
        - ariane_tile1_simple
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - ./build

#ariane_multicore:
#  extends: .ariane_base
#  stage: sim_multicore
#  parallel:
#    matrix:
#      - SIM_TYPE: [vlt]
#        TEST_GROUP:
#        - ariane_tile16
#  artifacts:
#    expire_in: 1 day
#    when: always
#    paths:
#      - ./build